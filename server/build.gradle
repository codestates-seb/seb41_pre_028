plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
//	id 'org.asciidoctor.convert' version '1.5.8'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.codestates.pre_028'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExtensions
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'


	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	implementation 'com.google.code.gson:gson'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	//링크 전달을 위한 HATEOAS
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'


	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'



	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'

	// queryDSL 설정
	implementation "com.querydsl:querydsl-jpa"
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("${asciidoctor.outputDir}")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

bootJar {
	dependsOn copyDocument
	from ("${asciidoctor.outputDir}") {
		into 'static/docs'
	}

	// Querydsl 설정부
	def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
	tasks.withType(JavaCompile) {
		options.getGeneratedSourceOutputDirectory().set(file(generated))
	}

// java source set 에 querydsl QClass 위치 추가
	sourceSets {
		main.java.srcDirs += [ generated ]
	}

// gradle clean 시에 QClass 디렉토리 삭제
	clean {
		delete file(generated)
	}
}